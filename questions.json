{
  "html": [
    {
      "id": 1,
      "text": "What tag is used to create a link?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<link>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<a>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<href>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<anchor>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 2,
      "text": "What tag is used to insert an image?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<img>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<picture>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<media>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<graphic>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 3,
      "text": "What tag in the <html> defines the document's title?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<head>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<header>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<title>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<meta>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "text": "What attribute is used to define an alternative text for an image?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "src",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "alt",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "title",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "href",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 5,
      "text": "What attribute is used to open a link in a new tab?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "target=_blank",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "target=blank",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "target=_self",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "target=_new",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 6,
      "text": "What is the purpose of the 'placeholder' attribute?",
      "hasOptions": false,
      "answer": "Attribute placeholder is used to display a hint or example text in a form field before the user enters their own data."
    },
    {
      "id": 7,
      "text": "How to make an unordered list in HTML?",
      "hasOptions": false,
      "answer": "For creating an unordered list, use the <code>ul</code> tag. And for defining each item in the list, use the <code>li</code> tag."
    },
    {
      "id": 8,
      "text": "What is HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - standartized markup language used for creating and developing web pages. It is a system for tagging parts of a Web document by using tags, enclosed in angle brackets."
    },
    {
      "id": 9,
      "text": "What is the purpose of the <!DOCTYPE> tag?",
      "hasOptions": false,
      "answer": "This is the declaration that informs the web browser about the markup language version used to create the web page. It helps the browser to display the page correctly."
    },
    {
      "id": 10,
      "text": "What tag is used to create a table?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<table>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<grid>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<row>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<column>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "What tag is used to create a table header?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<caption>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<th>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<thead>",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "<title>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "What tag is used to create a table row?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<td>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<row>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<line>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<tr>",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 13,
      "text": "What tag is used to create a table cell?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<cell>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<tr>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<th>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<td>",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 14,
      "text": "What are semantic tags in HTML?",
      "hasOptions": false,
      "answer": "Semantic tags in HTML are tags that convey information about the meaning or purpose of the content, rather than just about its appearance. Examples of semantic tags: header, footer, article, section, nav, etc. They help to create more structured and accessible web pages."
    },
    {
      "id": 15,
      "text": "What attribute is used to set a background image?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "background",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "background-color",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "bgcolor",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "background-image",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 16,
      "text": "What tag is used to create a dropdown list?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<dropdown>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<list>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<select>",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "<option>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 17,
      "text": "What tag is used to insert JavaScript code into an HTML document?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<javascript>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<script>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<js>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<java>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 18,
      "text": "What attribute is used to specify the path to an image?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "src",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "href",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "path",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "url",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 19,
      "text": "What does the 'readonly' attribute do in a form element?",
      "hasOptions": false,
      "answer": "Attribute 'readonly' makes a form element read-only, which means that the user cannot change the value of the element, but can view it. This can be useful if you want to display information that cannot be changed."
    },
    {
      "id": 20,
      "text": "What are web standards and why are they important?",
      "hasOptions": false,
      "answer": "Web standart are recomendations developed by standart groups such as W3C or WHATWG to ensure compatibility and stability of web technologies. They include recommendations for HTML, CSS, JavaScript and other web technologies. Complying with web standards helps to ensure that web pages work correctly in different browsers and devices, and also makes it easier to maintain and extend websites in the future."
    },
    {
      "id": 21,
      "text": "What is responsive web design?",
      "hasOptions": false,
      "answer": "This approach to web design allows web pages to display and function correctly on different devices, including mobile phones, tablets and desktop computers, by using flexible layouts, flexible images and CSS media queries to adapt the design to different screen sizes and device characteristics."
    },
    {
      "id": 22,
      "text": "What HTML tag is used to insert a video?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<media>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<video>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<movie>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<multimedia>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 23,
      "text": "What tag is used to create a main heading on a web page?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<h1>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<header>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<title>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<head>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 24,
      "text": "What does the <br> tag do?",
      "hasOptions": false,
      "answer": "It is used to insert a line break, which allows to create a new line at the place where it is placed. This is a convenient way to control the layout of text on a web page without using additional styles or elements."
    },
    {
      "id": 25,
      "text": "What tag is used to create an ordered list?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<ul>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<ol>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<li>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<list>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 26,
      "text": "What is DOM in the context of web development?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - is a programming interface for web documents. It is a representation of a structured document as an object model, which allows programs and scripts to interact with the content, structure and styles of a web page. The DOM represents the document as a tree of objects, each of which corresponds to a part of the page."
    },
    {
      "id": 27,
      "text": "What attribute is used to define styles for an element on a page?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "style",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "css",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "styles",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "stylesheet",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 28,
      "text": "What is the 'alt' attribute in the <img> tag for?",
      "hasOptions": false,
      "answer": "It is used to provide alternative text that will be displayed in case the image cannot be loaded. This can also be useful for accessibility, as screen readers can use this text to describe the image to users with disabilities."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "What is the difference between 'resetting' and 'normalizing' CSS? Which would you choose, and why?",
      "hasOptions": false,
      "answer": "Reset drops all browser's default styling of elements. Normalize makes styles consistent across browsers. Normalize is better to use because of cross-browser compatibility."
    },
    {
      "id": 2,
      "text": "What is the specificity of CSS selectors and how does it work?",
      "hasOptions": false,
      "answer": "Selector specificity (also called weight) is a property that determines the priority of a style rule, that is, which style will be applied to an HTML element in the end. For example, when using some UI library, the elements of this library will have rules set by default by the authors. If necessary, you can change the styles to your own, 'overriding' the defaults with a more specific selector. More information can be found here: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Specifity (MDN)</a>"
    },
    {
      "id": 3,
      "text": "What is CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) is a style sheet language used for describing the presentation of a document written in a markup language, such as HTML. CSS allows developers to control the layout, fonts, colors, and other stylistic aspects of a web page."
    },
    {
      "id": 4,
      "text": "Why is it usually better to place CSS in <head> and <script> before </body>? Do you know any exceptions, give examples?",
      "hasOptions": false,
      "answer": "It is recommended to include styles in the head section in order for the page to display its external appearance as quickly as possible. Scripts included in the head section can slow down this process, so it is recommended to include them before the closing body tag. An exception is made for analytics scripts, which are used to determine the number of visitors who did not wait for the page to load. In this case, the script should be included in the head section."
    },
    {
      "id": 5,
      "text": "What does the 'z-index' property do in CSS?",
      "hasOptions": false,
      "answer": "The 'z-index' property in CSS controls the stacking order of elements along the Z-axis. An element with a higher 'z-index' value will be displayed on top of an element with a lower 'z-index' value."
    },
    {
      "id": 6,
      "text": "What are the ways to center a div?",
      "hasOptions": false,
      "answer": "There are several ways to center a div in CSS, here are some of them: \n1. Using the margin and auto properties: `margin: 0 auto;`.\n2. Using Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Using Grid Layout: `display: grid; place-items: center;`.\n4. Using the text-align and inline-block properties: `text-align: center;` on the parent element and `display: inline-block;` on the div."
    },
    {
      "id": 7,
      "text": "Which property is used to set the background color?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "color",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "background-color",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "bgcolor",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "background",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "text": "What property is used to set the external margins of an element?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "padding",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "border",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "margin",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "spacing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "text": "Which property is used to set the font?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "font-weight",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "font-style",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "text-font",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "font-family",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 10,
      "text": "What CSS property allows you to control the visibility of an element in the DOM while preserving its position?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "display: none",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "visibility: hidden",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "is-visible: 0",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "color: transparent",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "What CSS property is used to set shadows for elements?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "box-shadow",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "text-shadow",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "shadow",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "border-shadow",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "Which selector selects all .child elements that are immediate children of .parent?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": ".parent + .child",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": ".parent ~ .child",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": ".parent > .child",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": ".parent .child",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 13,
      "text": "Which CSS selector selects all elements that have a specified attribute starting with a certain string?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "[attr=value]",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "[attr~=value]",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "[attr|=value]",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "[attr^=value]",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 14,
      "text": "Which CSS selector selects all elements that have a specified attribute ending with a certain string?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "[attr=value]",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "[attr~=value]",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "[attr|=value]",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "[attr$=value]",
          "isCorrect": true
        }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "What is a pure function?",
      "hasOptions": false,
      "answer": "This is a function that returns the same result when called with the same set of arguments, and also has no side effects."
    },
    {
      "id": 2,
      "text": "What is a closure?",
      "hasOptions": false,
      "answer": "Closures are the ability of a function to remember the lexical environment in which it was created, that is, to store a reference to this environment and access it.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Detailed video about closures (in Russian)</a>"
    },
    {
      "id": 3,
      "text": "let VS const: why is it better to use const when possible?",
      "hasOptions": false,
      "answer": "Using const provides two advantages:\n1) Safety: declaring variables with const protects against unexpected changes to the variable's value in the code, which can often lead to errors and unexpected program behavior.\n2) Readability: using const allows the reader of the code to understand that the variable's value will not change during program execution. This makes the code more understandable and reduces the possibility of errors.\n\nMore information: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Video about VAR/LET/CONST</a>"
    },
    {
      "id": 4,
      "text": "What are Promises in JavaScript?",
      "hasOptions": false,
      "answer": "Promises are objects that represent the result of an asynchronous operation. They can be in one of three states: pending, fulfilled, or rejected."
    },
    {
      "id": 5,
      "text": "What is destructuring in JavaScript?",
      "hasOptions": false,
      "answer": "Destructuring allows you to extract individual properties from objects or elements from arrays and assign them to variables in a more convenient form. For example, like this we can extract the name and address of a user from the user object in one line of code:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "What are arrow functions in JavaScript?",
      "hasOptions": false,
      "answer": "Arrow functions are a syntactically compact way of writing functions in JavaScript that do not have their own 'this'. They are often used to create anonymous functions.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Detailed video about functions in JS</a>"
    },
    {
      "id": 7,
      "text": "What is hoisting in JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting is a mechanism in JavaScript where variables and function declarations are moved to the top of their scope before the code is executed."
    },
    {
      "id": 8,
      "text": "What method is used to add an element to an array?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "splice()",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "pop()",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "shift()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "push()",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 9,
      "text": "What object represents the current browser window?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "document",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "screen",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "window",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "browser",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "text": "What operator is used for strict equality comparison?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "==",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "===",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "=",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "!==",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "What method is used to remove the last element from an array?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "splice()",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "pop()",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "shift()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "push()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "What method in JavaScript is used to convert an object to a JSON string?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "JSON.stringify()",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "JSON.parse()",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "JSON.toText()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "JSON.toString()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 13,
      "text": "What object in JavaScript is used to work with date and time?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Time",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Date",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Calendar",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "DateTime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 14,
      "text": "What method of an array in JavaScript is used to filter elements based on a certain criteria?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "map()",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "filter()",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "reduce()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "forEach()",
          "isCorrect": false
        }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "What is React JS?",
      "hasOptions": false,
      "answer": "React JS, or just React, это открытая библиотека JavaScript для создания пользовательских интерфейсов, особенно для одностраничных приложений (SPA). Ключевые особенности React:\n1) Компонентный подход: React строится на концепции компонентов, что позволяет разработчикам создавать легко переиспользуемые куски кода;\n2) Виртуальный DOM: React использует виртуальный DOM для отслеживания изменений. Это абстракция реального DOM, что позволяет библиотеке обновлять только те части интерфейса, которые действительно изменились, вместо полного перерендеринга страницы. Это делает React относительно быстрым;\n3) Хуки: Введение хуков позволило использовать состояния и другие возможности классовых компонентов в функциональных компонентах, что сделало код более кратким и чистым;\n4) Сообщество и экосистема: React имеет большое и активное сообщество разработчиков, а также много библиотек и инструментов, созданных сообществом, что облегчает разработку сложных приложений.\n\nПодробнее: <a href='https://youtu.be/R_39q-vdOaE?si=mEKDaYDjEdnojG-N' target='_blank'>Введение в React (видео)</a>"
    },
    {
      "id": 2,
      "text": "What is the purpose of the key attribute when rendering lists?",
      "hasOptions": false,
      "answer": "Keys help React determine which items have changed, been added, or been removed from a list. They should be specified to help React match elements in the array over time. The best way to pick a key is to use a string that will uniquely identify a list item among its siblings. Most often you would use IDs from your data as keys. Indexes from the array can be used as keys as well, but only if the items in the array don’t have a stable ID."
    },
    {
      "id": 3,
      "text": "What is the purpose of the children prop in React?",
      "hasOptions": false,
      "answer": "Some components don't know their children ahead of time. This is especially common for such components as Sidebar or Dialog that represent a box that can have anything inside. For such components, you can use a special prop called children that will pass the child elements directly to the output.\n\nMore: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>React documentation</a>"
    },
    {
      "id": 4,
      "text": "What are portals in React?",
      "hasOptions": false,
      "answer": "Portals allow you to render child elements into a DOM node that exists outside the DOM hierarchy of the parent component. A typical use case for portals is when the parent component has an overflow: hidden or z-index style, but you need the child element to visually break out of its container. This is most often modal dialogs, popovers, and tooltips."
    },
    {
      "id": 5,
      "text": "What is Reconciliation in React?",
      "hasOptions": false,
      "answer": "It is the process by which React updates the DOM. When the state of a component changes, React must calculate the need to update the DOM. This is done by creating a virtual DOM and comparing it to the current DOM. In this context, the virtual DOM will contain the new state of the component."
    },
    {
      "id": 6,
      "text": "What is the purpose of the useEffect hook in React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Storing component state",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Performing side effects",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Memoization of values",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Creation of links to DOM elements",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "What happens if you pass an empty array [] as the second argument to useEffect?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Error",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "useEffect will be executed 0 times",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "useEffect will be executed 1 time",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "There is no correct answer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "text": "What hook is used to create state in a component?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "useEffect",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "useState",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "useContext",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "useReducer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "text": "Какой элемент используется для группировки элементов без добавления дополнительных узлов в DOM?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<Group>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<Div>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<Fragment> (<>)",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "<List>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "text": "We have an array of strings (arr) and we want to display each of them on the page. Which array method should be used in the component's return statement?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "{arr.forEach(...)}",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "{arr.filter(...)}",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "{arr.for(...)}",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "{arr.map(...)}",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 11,
      "text": "What element is used to handle errors in the component tree?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "ErrorBoundary",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "CatchError",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "ErrorWrapper",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "ErrorCatcher",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "What argument(s) does the useMemo hook take?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "A function and an array of dependencies",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "A function and an options object",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Function",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "An array of dependencies",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 13,
      "text": "What is the purpose of the useCallback hook in React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Creating references to DOM elements",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Storing component state",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Execution of side effects",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Function memoization",
          "isCorrect": true
        }
      ]
    }
  ]
}